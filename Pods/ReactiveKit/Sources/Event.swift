//
//  The MIT License (MIT)
//
//  Copyright (c) 2016 Srdan Rasic (@srdanrasic)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

/// Represents a stream event.
public protocol EventType {

  /// The type of elements generated by the stream.
  associatedtype Element

  /// Extract an element from a non-terminal event.
  var element: Element? { get }

  /// Does the event mark completion of a stream?
  var isCompletion: Bool { get }

  /// Does the event mark failure of a stream?
  var isFailure: Bool { get }

  /// Create new `.Next` event given an element.
  static func next(element: Element) -> Self

  /// Create new `.Completed` event.
  static func completed() -> Self
}

/// An event that represents a failure of a stream.
public protocol Errorable {

  /// The type of error generated by the stream.
  associatedtype Error: ErrorType

  /// Extract an error from a failure event.
  var error: Error? { get }

  /// Create new `.Failure` event given an error.
  static func failure(error: Error) -> Self
}

// MARK: - Extensions

public extension EventType {

  /// `True` if event is either a completion or a failure.
  public var isTermination:  Bool {
    return isCompletion || isFailure
  }
}
